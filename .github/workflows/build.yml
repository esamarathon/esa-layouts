name: Build

on:
  push:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout NodeCG
    - name: Checkout nodecg/nodecg
      uses: actions/checkout@v2
      with:
        token: ${{ secrets['GITHUB_TOKEN'] }}
        repository: nodecg/nodecg
        ref: 'v1.8.1'
        path: ./nodecg-temp

    # Copies checked out NodeCG into permanent folder.
    # If I didn't do this, some bundles seemed to not actually checkout successfully later
    - name: Copy ./nodecg-temp > ./nodecg
      run: cp -r ./nodecg-temp ./nodecg

    # Checkout the main branch of this repository with full depth
    - name: Checkout this repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets['GITHUB_TOKEN'] }}
        ref: uksgw22
        fetch-depth: 0
        path: ./nodecg/bundles/esa-layouts

    # Set the local git user config to use the GitHub Actions bot account
    - name: Set local git config user details
      working-directory: ./nodecg/bundles/esa-layouts
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

    # Recheckout both the main and build branches.
    # This can "fail" if the build branch doesn't exist, but we should continue anyway.
    - name: (Re)checkout both branches
      id: checkout
      continue-on-error: true
      working-directory: ./nodecg/bundles/esa-layouts
      run: |
        git checkout uksgw22
        git checkout uksgw22-build

    # Attempt to start to merge the main branch into build.
    # This can "error" but we want to continue regardless.
    # Will only run if the checkout step was successful.
    - name: Merge main into build (1)
      if: ${{ steps.checkout.outcome == 'success' }}
      continue-on-error: true
      working-directory: ./nodecg/bundles/esa-layouts
      run: |
        git merge --no-commit uksgw22

    # Do the 2nd part of the merge. This will ignore the main's "shared" submodule stuff.
    # This can "error" if the merge commit is empty but we want to continue regardless.
    # Will only run if the checkout step was successful.
    - name: Merge main into build (2)
      if: ${{ steps.checkout.outcome == 'success' }}
      continue-on-error: true
      working-directory: ./nodecg/bundles/esa-layouts
      run: |
        rm -rf shared~uksgw22
        git rm --ignore-unmatch --cached -r shared~uksgw22
        git reset HEAD shared
        git commit -m "Merge branch 'uksgw22' into build"

    # Returns the submodule back so we can get the latest files to build from that.
    # Will only run if the checkout step was successful.
    - name: Re-add esa-layouts-shared submodule
      if: ${{ steps.checkout.outcome == 'success' }}
      working-directory: ./nodecg/bundles/esa-layouts
      run: |
        rm -rf shared
        git rm --ignore-unmatch --cached -r shared
        git checkout uksgw22 shared
        git commit -m "Re-add submodule" -a --allow-empty

    # Converts the esa-layouts-shared submodule into a normal directory of files.
    # This is done as we want to freeze the build at a point in time and this works well.
    - name: Convert esa-layouts-shared submodule to regular directory
      working-directory: ./nodecg/bundles/esa-layouts
      run: |
        git submodule update --init
        git rm --cached shared
        git config -f .git/config --remove-section submodule.shared
        rm -rf shared/.git
        git add shared

    # Setup some Node stuff
    - name: Node.js setup
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    # Set NPM cache options
    - name: Set NPM cache
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Update NPM to the latest version
    - name: Update NPM installation
      run: npm install -g npm@latest

    # Install NodeCG NPM dependencies
    - name: Install NodeCG NPM dependencies
      working-directory: ./nodecg
      run: npm install --production

    # Install NPM dependencies
    - name: Install NPM dependencies
      working-directory: ./nodecg/bundles/esa-layouts
      run: npm ci

    # Actually build everything
    - name: Build
      working-directory: ./nodecg/bundles/esa-layouts
      run: |
        npm run clean
        npm run build

    # Start committing newly built files into a temporary commit.
    - name: Commit built files (1)
      working-directory: ./nodecg/bundles/esa-layouts
      run: |
        git add -f dashboard graphics extension
        git add -f ':(glob)./shared/extension/*/dist/**'
        git commit -m "Built files" -a --allow-empty

    # Squash the previous 2 commits down for convenience and create the final build commit.
    # Will only run if the checkout step was successful.
    # This can "fail" if there are no newly changed/built files, but we should continue anyway.
    - name: Commit built files (2)
      continue-on-error: true
      if: ${{ steps.checkout.outcome == 'success' }}
      working-directory: ./nodecg/bundles/esa-layouts
      run: |
        git reset --soft HEAD~2
        git commit -m "Built files" -a

    # Pushes the built files to a specific branch
    - name: Push built files to "build" branch
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets['GITHUB_TOKEN'] }}
        branch: uksgw22-build
        directory: ./nodecg/bundles/esa-layouts
